1. Что такое сериализация/дессериализация?

Сериализация – запись объекта в поток
Десериализация – чтение объекта из потока
При сериализации и десериализации мы выбираем, какие данные объекта надо записать и какие надо считать

2.Какая последовательность работы с потоком?

Первое это открытие потока для чтения из файла, записи в файл и т.п.
далее чтение / запись.
потом идет закрытие потока для освобождения ресурсов и предотвращения утечки памяти.
в конце - обработка ошибок. Необходимо учитывать появление возможных ошибок,
обычно используется IOException

3.Какие виды потоков существуют?
Разделяют два вида потоков ввода/вывода: байтовые и символьные.

Байтовые потоки предоставляют удобные средства для обработки ввода и вывода байт.
Байтовые потоки используются, например, при чтении или записи данных в двоичном коде.

Символьные потоки предоставляют удобные средства для обработки ввода и вывода символов.
Они используют Unicode и поэтому могут быть интернационализированы. Кроме того, в некоторых случаях символьные потоки более эффективны, чем байтовые.

4.Чем отличается IO от NIO?
Основное отличие между двумя подходами к организации ввода/вывода в том,
что Java IO является потокоориентированным, а Java NIO – буфер-ориентированным.

Потокоориентированный ввод/вывод подразумевает чтение/запись из потока/в поток одного или нескольких байт в единицу времени поочередно. Данная информация нигде не кэшируются(в IO)

Подход, на котором основан Java NIO немного отличается. Данные считываются в буфер для последующей обработки. Вы можете двигаться по буферу вперед и назад. Это дает немного больше гибкости при обработке данных.
В то же время, вам необходимо проверять содержит ли буфер необходимый для корректной обработки объем данных
